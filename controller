#!/usr/bin/env python

import ConfigParser
import Queue
import SocketServer
import base64
import hashlib
import hmac
import json
import logging
import logging.handlers
import os
import paho.mqtt.client as mqtt
import pika
import pprint
import requests
import socket
import struct
import sys
import threading
import time
import urllib2

os.chdir(os.path.dirname(sys.argv[0]))

config = ConfigParser.ConfigParser({
    "amqp_host": None,
    "mqtt_host": None,
    "mqtt_topic": "or2_controller",
    "cards_file": "cards.conf",
    "readers_file": "readers.conf",
    "listen_port": 21046,
    "database_check_interval": 5,
    "reader_sync_interval": 3600,
    "client_timeout": 60,
    "command_socket_path": "/var/run/controller.sock",
    "send_anonymous": "false",
})
config.read("controller.conf")

if sys.argv[1:] == ["--debug"]:
    logging.basicConfig(format="%(asctime)-15s %(filename)s:%(lineno)d %(message)s")
    logging.getLogger().setLevel(logging.DEBUG)
else:
    ident = os.path.basename(sys.argv[0])
    if os.path.exists("/dev/log"):
        syslog_address = "/dev/log"
    else:
        syslog_address = ("127.0.0.1", 514)
    syslog_format_string = ident + "[%(process)s]: %(message)s"
    syslog_handler = logging.handlers.SysLogHandler(address=syslog_address, facility=logging.handlers.SysLogHandler.LOG_USER)
    syslog_handler.log_format_string = "<%d>%s"
    syslog_handler.setFormatter(logging.Formatter(fmt=syslog_format_string))
    syslog_handler.setLevel(logging.INFO)
    logging.getLogger().addHandler(syslog_handler)
    logging.getLogger().setLevel(logging.INFO)
logging.getLogger("pika").setLevel(logging.WARNING)

import database
import decoder
from manager import Reader

amqp_host = config.get("controller", "amqp_host")
mqtt_host = config.get("controller", "mqtt_host")
mqtt_topic = config.get("controller", "mqtt_topic")
cards_filename = config.get("controller", "cards_file")
readers_filename = config.get("controller", "readers_file")
listen_port = config.getint("controller", "listen_port")
database_check_interval = config.getint("controller", "database_check_interval")
reader_sync_interval = config.getint("controller", "reader_sync_interval")
client_timeout = config.getint("controller", "client_timeout")
command_socket_path = config.get("controller", "command_socket_path")
send_anonymous = config.getboolean("controller", "send_anonymous")

queue = Queue.Queue()
amqp_outbound = Queue.Queue()
mqtt_outbound = Queue.Queue()
token_sighting_queue = Queue.Queue()

readers = {}
client_id2addr = {}
client_addr2id = {}
client_lastrecv = {}
client_lastsend = {}
readernotfound_timestamp = {}
last_database_check = time.time()

class JsonLogger(object):
    def __init__(self, template="%Y-%m-%d.log", localtime=False):
        self.template = template
        if localtime:
            self.timefunction = time.localtime
        else:
            self.timefunction = time.gmtime
        self.filename = None
        self.fh = None
    def write(self, data):
        if not data.has_key("timestamp"):
            data["timestamp"] = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
        try:
            new_filename = time.strftime(self.template, self.timefunction())
            if new_filename != self.filename:
                self.filename = new_filename
                self.fh = open(self.filename, "a")
            self.fh.write(json.dumps(data)+"\r\n")
            self.fh.flush()
        except Exception:
            logging.exception("AuthLogger exception")

class CommandThread(threading.Thread):
    class ProtocolHandler(SocketServer.StreamRequestHandler):
        def handle(self):
            line = self.rfile.readline().strip()
            while line != "":
                logging.info("cmd> %s" % (line))
                for reply in self.handle_line(line):
                    self.wfile.write(reply+"\r\n")
                line = self.rfile.readline().strip()
        def handle_line(self, line):
            args = line.split(" ")
            cmd = args[0].upper()
            if args[0] == "SEND_B64":
                return self.cmd_send_b64(args[1:])
            if args[0] == "SET":
                return self.cmd_set(*args[1:4])
            elif args[0] == "PING":
                return self.cmd_ping()
            elif args[0] == "READERS":
                return self.cmd_readers()
            else:
                return ["Unknown command"]
        def cmd_send_b64(self, args):
            readerid = args[0].upper()
            payload = base64.b64decode(args[1])
            try:
                addr = client_id2addr[readerid]
                logging.debug("TO %s %s:%s %r" % (readerid, addr[0], addr[1], payload))
                try:
                    sock.sendto(payload, addr)
                except socket.error:
                    logging.exception("Error transmitting packet")
                    yield "Unable to send packet"
            except KeyError:
                yield "Unknown reader %s" % (readerid)
        def cmd_readers(self):
            yield " ".join(readers)
        def cmd_set(self, readerid, k, value):
            readerid = readerid.upper()
            logging.debug("request to set variable %s to %r" % (k, value))
            payload = struct.pack("B", 0x97) + decoder.encode_var(k, value)
            try:
                addr = client_id2addr[readerid]
                logging.debug("TO %s %s:%s %r" % (readerid, addr[0], addr[1], payload))
                try:
                    sock.sendto(payload, addr)
                except socket.error:
                    logging.exception("Error transmitting packet")
                    yield "Unable to send packet"
            except KeyError:
                yield "Unknown reader %s" % (readerid)
        def cmd_ping(self):
            yield "PONG"
    class StreamServer(SocketServer.ThreadingMixIn, SocketServer.UnixStreamServer):
        pass
    def loop(self):
        logging.debug("CommandThread starting")
        if os.path.exists(command_socket_path):
            os.unlink(command_socket_path)
        server = self.StreamServer(command_socket_path, self.ProtocolHandler)
        server.serve_forever()
    def run(self):
        while True:
            try:
                self.loop()
            except Exception:
                logging.exception("Error in CommandThread")
            time.sleep(1)

class UDPReceiveThread(threading.Thread):
    def run(self):
        global sock
        while True:
            data, addr = sock.recvfrom(1024)
            #logging.debug("Message received from %r: %r" % (addr, data))
            if len(data) > 1:
                if data[0] == "\x00":
                    clientid = data[1:].rstrip("\x00")
                    client_id2addr[clientid] = addr
                    client_addr2id["%s:%s" % addr] = clientid
            try:
                clientid = client_addr2id["%s:%s" % addr]
                client_lastrecv[clientid] = time.time()
                queue.put((clientid, addr, data))
            except KeyError:
                pass

class TokenSightingThread(threading.Thread):
    def run(self):
        logging.info("Starting TokenSightingThread")
        self.url = config.get("controller", "token_sighting_url", None)
        self.api_key = config.get("controller", "token_sighting_key", "")
        self.api_secret = config.get("controller", "token_sighting_secret", "")
        if self.url is None:
            logging.warning("token_sighting_url not specified, TokenSightingThread aborting")
            return
        while True:
            try:
                self.loop()
            except Exception:
                logging.exception("TokenSightingThread restarted")
                time.sleep(1)
    def loop(self):
        while True:
            msg = token_sighting_queue.get(True)
            h = hmac.HMAC(self.api_secret.encode('utf8'), digestmod=hashlib.sha512)
            for k in sorted(msg.keys()):
                if k not in ["api_key", "api_hmac_sha512"]:
                    h.update(("%s=%s:" % (k, msg[k])).encode('utf8'))
            msg['api_key'] = self.api_key
            msg['api_hmac_sha512'] = h.hexdigest()
            for url in self.url.split(" "):
                r = requests.post(url, data=json.dumps(msg))
                logging.info("sent token_sighting request to %s, reply: %r" % (url, r.text))

class AmqpTxThread(threading.Thread):
    amqp_host = None
    amqp_exchange = "events"

    def run(self):
        if self.amqp_host is None:
            logging.warning("amqp_host not specified, AMQP TX thread aborting")
            return
        while True:
            try:
                self.loop()
            except Exception:
                logging.exception("AMQP TX thread restarted")
                time.sleep(1)
    def _reconnect(self):
        self.connection = pika.BlockingConnection(pika.ConnectionParameters(host=self.amqp_host, heartbeat_interval=30))
        self.channel = self.connection.channel()
        self.channel.exchange_declare(exchange=self.amqp_exchange, type="topic")
        logging.info("Connected to AMQP (TX)")
    def loop(self):
        self._reconnect()
        while True:
            try:
                topic, payload = amqp_outbound.get(True, 5)
                if type(payload) is dict:
                    headers = payload
                else:
                    headers = {}
                delay = 1
                max_delay = 60
                timestamp = time.time()
                while True:
                    try:
                        self.channel.basic_publish(exchange=self.amqp_exchange,
                                                   routing_key=topic,
                                                   body=json.dumps(payload),
                                                   properties=pika.BasicProperties(
                                                       timestamp=timestamp,
                                                       headers=headers
                                                       ))
                        break
                    except Exception, e:
                        logging.exception("AMQP publish failed (will retry in %ds)" % (delay))
                        time.sleep(delay)
                        delay = min(delay*2, max_delay)
                        self._reconnect()
            except Queue.Empty:
                pass
            self.connection.process_data_events()

class MqttTxThread(threading.Thread):
    mqtt_host = None
    mqtt_topic = None

    def run(self):
        if self.mqtt_host is None:
            logging.warning("mqtt_host not specified, MQTT TX thread aborting")
            return
        while True:
            try:
                self.loop()
            except Exception:
                logging.exception("MQTT TX thread restarted")
                time.sleep(1)
    def _reconnect(self):
        self.connection = mqtt.Client()
        self.connection.connect(self.mqtt_host)
        #self.connection.loop_start()
        logging.info("Connected to MQTT (TX)")
    def loop(self):
        self._reconnect()
        while True:
            try:
                topic, data, retain = mqtt_outbound.get(True, 1)
                if type(data) is dict:
                    payload = json.dumps(data)
                elif type(data) is None:
                    payload = ""
                else:
                	payload = str(data)
                delay = 1
                max_delay = 60
                timestamp = time.time()
                while True:
                    try:
                        self.connection.publish("%s/%s" % (self.mqtt_topic, topic), payload=payload, retain=retain)
                        break
                    except Exception, e:
                        logging.exception("MQTT publish failed (will retry in %ds)" % (delay))
                        time.sleep(delay)
                        delay = min(delay*2, max_delay)
                        self._reconnect()
            except Queue.Empty:
                pass
            self.connection.loop()

auth_logger = JsonLogger("/var/log/controller/%Y%m%d.log")

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind(("0.0.0.0", listen_port))

amqptxthread = AmqpTxThread()
amqptxthread.amqp_host = amqp_host
amqptxthread.daemon = True
amqptxthread.start()

mqtttxthread = MqttTxThread()
mqtttxthread.mqtt_host = mqtt_host
mqtttxthread.mqtt_topic = mqtt_topic
mqtttxthread.daemon = True
mqtttxthread.start()

udpreceivethread = UDPReceiveThread()
udpreceivethread.daemon = True
udpreceivethread.start()

commandthread = CommandThread()
commandthread.daemon = True
commandthread.start()

tokensightingthread = TokenSightingThread()
tokensightingthread.daemon = True
tokensightingthread.start()

db = database.CardDatabase(cards_filename, readers_filename)

logging.info("Ready to process...")

while True:

    if time.time()-last_database_check > database_check_interval:
        db.autoreload()
        last_database_check = time.time()

    try:

        readerid, addr, data = queue.get(True, timeout=10)

        if not readers.has_key(readerid):
            try:
                readers[readerid] = Reader(readerid, db, addr,
                    sync_interval=reader_sync_interval,amqp_outbound=amqp_outbound,
                    auth_logger=auth_logger, token_sighting_queue=token_sighting_queue,
                    send_anonymous=send_anonymous, mqtt_outbound=mqtt_outbound)
            except database.ReaderNotFound:
                if time.time() - readernotfound_timestamp.get(readerid, 0) > 300:
                    logging.info("Unknown reader %s, ignoring" % (readerid))
                    readernotfound_timestamp[readerid] = time.time()
                continue
        reader = readers[readerid]
        reader.addr = addr

        decoded = decoder.decode_packet(data)
        #logging.debug("%s > %s" % (readerid, decoder.hexify(data, sep="-")))
        if decoded:
            logging.debug("FROM %s %s:%s %s" % (readerid, addr[0], addr[1], decoded["type"]))
            responses = reader.event(decoded["type"], decoded)
            for response in responses:
                encoded_response = decoder.encode_packet(response)
                if encoded_response is not None:
                    #logging.debug("%s < %s" % (readerid, decoder.hexify(encoded_response, sep="-")))
                    logging.debug("TO %s %s:%s" % (readerid, addr[0], addr[1]))
                    client_lastsend[readerid] = time.time()
                    try:
                        sock.sendto(encoded_response, addr)
                    except socket.error, e:
                        logging.exception("Error transmitting packet")

            for response in reader.outgoing():
                encoded_response = decoder.encode_packet(response)
                if encoded_response is not None:
                    #logging.debug("%s < %s" % (readerid, decoder.hexify(encoded_response, sep="-")))
                    logging.debug("TO %s %s:%s" % (readerid, addr[0], addr[1]))
                    client_lastsend[readerid] = time.time()
                    try:
                        sock.sendto(encoded_response, addr)
                    except socket.error, e:
                        logging.exception("Error transmitting packet")

    except Queue.Empty:
        pass

    for readerid in client_lastrecv.keys():
        if time.time()-client_lastrecv[readerid] > client_timeout:
            logging.info("%s: idle connection dropped" % (readerid))
            addr = client_id2addr[readerid]
            del readers[readerid]
            del client_id2addr[readerid]
            del client_lastrecv[readerid]
            del client_lastsend[readerid]
            del client_addr2id["%s:%s" % addr]

    for readerid, reader in readers.items():
        addr = client_id2addr[readerid]
        for response in reader.outgoing():
            encoded_response = decoder.encode_packet(response)
            if encoded_response is not None:
                #logging.debug("%s < %s" % (readerid, decoder.hexify(encoded_response, sep="-")))
                logging.debug("TO %s %s:%s" % (readerid, addr[0], addr[1]))
                client_lastsend[readerid] = time.time()
                try:
                    sock.sendto(encoded_response, addr)
                except socket.error, e:
                    logging.exception("Error transmitting packet")
