#!/usr/bin/env python
#
# This script monitors PIR activity for a room and enables/disables the exit
# function of the door controller as the PIR status changes.

import base64
import paho.mqtt.client as mqtt
import socket
import time

hostname = "mqtt.hacklab"
socket_path = "/var/run/controller.sock"

pir_timeout = 270
roomid = "g1"
readerid = "ESP_OR_0004CE0C"

last_pir = 0
exit_enabled = None

def parse_boolean(v):
    if str(v).lower() in ["0", "no", "n", "false", "f"]:
        return False
    elif str(v).lower() in ["1", "yes", "y", "true", "t"]:
        return True
    elif str(v).lower() in ["", "none", "null"]:
        return None
    else:
        raise ValueError

def send_command(readerid, message):
    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    s.connect(socket_path)
    s.send("SEND_B64 %s %s\r\n" % (readerid, base64.b64encode(message)))
    s.close()

def on_connect(client, userdata, flags, rc):
    client.subscribe("sensor/%s/pir" % (roomid))
    client.subscribe("or2_controller/%s/var/exitEnabled" % (roomid))
    client.subscribe("timesignal/60")

def on_message(client, userdata, msg):
    global last_pir
    global exit_enabled

    if msg.topic == "or2_controller/%s/var/exitEnabled" % (roomid):
        exitEnabled = parse_boolean(msg.payload)

    elif msg.topic == "sensor/%s/pir" % (roomid):
        last_pir = time.time()
        if exit_enabled is not True:
            send_command(readerid, "\x89\x01")

    elif msg.topic == "timesignal/60":
        if time.time() - last_pir > pir_timeout:
            if exit_enabled is not False:
                send_command(readerid, "\x89\x00")

m = mqtt.Client()
m.on_message = on_message
m.on_connect = on_connect
m.connect(hostname)
m.loop_forever()
